@page "/ListaColaboradores"
@using Projeto_Odontpro.Services
@using Projeto_Odontpro.Models
@inject FuncionarioService FuncionarioService
@inject NavigationManager NavigationManager

<h3>Lista de Funcionários</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nome</th>
            <th>Email</th>
            <th>Telefone</th>
            <th>Cargo</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @if (funcionarios == null)
        {
            <tr>
                <td colspan="6">Carregando...</td>
            </tr>
        }
        else if (funcionarios.Count == 0)
        {
            <tr>
                <td colspan="6">Nenhum funcionário cadastrado.</td>
            </tr>
        }
        else
        {
            @foreach (var funcionario in funcionarios)
            {
                <tr>
                    <td>@funcionario.Id</td>
                    <td>@funcionario.Nome</td>
                    <td>@funcionario.Email</td>
                    <td>@funcionario.Telefone</td>
                    <td>@funcionario.Cargo</td>
                    <td>
                        <button class="btn btn-primary btn-sm" @onclick="@(() => EditarFuncionario(funcionario.Id))">
                            Editar
                        </button>
                        <button class="btn btn-danger btn-sm" @onclick="@(() => ConfirmarExcluir(funcionario.Id))">
                            Excluir
                        </button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<div class="mt-3">
    <NavLink class="btn btn-success" href="/Cadastrodecolaborador">Adicionar Funcionário</NavLink>
    <button class="btn btn-secondary" @onclick="Sair">Sair</button>
</div>

@code {
    private List<Funcionario>? funcionarios;

    protected override async Task OnInitializedAsync()
    {
        funcionarios = await FuncionarioService.ObterTodos();
    }

    public async Task CarregarFuncionarios()
    {
        funcionarios = await FuncionarioService.ObterTodos();
    }

    private void EditarFuncionario(int id)
    {
        NavigationManager.NavigateTo($"/editarfuncionario/{id}");
    }

    private async Task ConfirmarExcluir(int id)
    {
        bool confirmado = await JSRuntime.InvokeAsync<bool>("confirm", $"Deseja realmente excluir o funcionário ID {id}?");
        if (confirmado)
        {
            await ExcluirFuncionario(id);
        }
    }

    private async Task ExcluirFuncionario(int id)
    {
        await FuncionarioService.Excluir(id);
        await CarregarFuncionarios();
    }

    private void Sair()
    {
        NavigationManager.NavigateTo("/");
    }

    [Inject]
    private IJSRuntime JSRuntime { get; set; }
}